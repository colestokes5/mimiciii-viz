# -*- coding: utf-8 -*-
"""mimiciii_viz.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uTC5bxjifkdH02T99Mexa-mJ-UEuG-1X

# AI in Healthcare - Assignment 1: MIMIC-III Visualizations

### Connect to MIMIC-III Through Google BigQuery
"""

# Auth is meant for Google Colab. May have to set up dataset locally or create your own Big Query dataset
# Standard Jupyter Notebook may have a different setup process
from google.colab import auth
from google.cloud import bigquery
bq_client = bigquery.Client(project = "your-project-id")
auth.authenticate_user()

# Imports required libraies
import holoviews as hv
from holoviews import opts
from itertools import combinations
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import seaborn as sns

hv.extension('bokeh')

"""### Visualization 1 - MIMIC-III Sankey Flow Diagram for Emergency-admitted Patients into ICU Care Units"""

# Query the MIMIC-III dataset to get admissions and ICU data
# Saves data in a Pandas dataframe
patient_flow_df = bq_client.query('''
SELECT a.subject_id, a.hadm_id, i.first_careunit as from_unit, i.last_careunit as to_unit
FROM `physionet-data.mimiciii_clinical.admissions` a
LEFT JOIN `physionet-data.mimiciii_clinical.icustays` i ON a.hadm_id = i.hadm_id
WHERE a.admission_type = 'EMERGENCY'
ORDER BY a.subject_id;
''').to_dataframe()

# Create care unit nodes and add in and out
nodes = list(set(patient_flow_df['from_unit']).union(set(patient_flow_df['to_unit'])))
nodes = ['In'] + nodes + ['Out']
node_indices = {node: i for i, node in enumerate(nodes)}

# Create a flow counts dataframe
transitions = []
for _, row in patient_flow_df.iterrows():
    transitions.append((row['from_unit'], row['to_unit']))
transition_df = pd.DataFrame(transitions, columns=['from_unit', 'to_unit'])
flow_counts = transition_df.groupby(['from_unit', 'to_unit']).size().reset_index(name='Flow')

# Add flows in and out of the hospital
in_flows = []
out_flows = []
for _, row in patient_flow_df.iterrows():
    subject_id = row['subject_id']
    first_unit = row['from_unit']
    in_flows.append({'from_unit': 'In', 'to_unit': first_unit, 'Flow': 1})
    last_unit = row['to_unit']
    out_flows.append({'from_unit': last_unit, 'to_unit': 'Out', 'Flow': 1})

# Combine the dataframes
in_flows_grouped = pd.DataFrame(in_flows).groupby(['from_unit', 'to_unit'], as_index=False).sum()
out_flows_grouped = pd.DataFrame(out_flows).groupby(['from_unit', 'to_unit'], as_index=False).sum()
flow_counts = pd.concat([flow_counts, in_flows_grouped], ignore_index=True)
flow_counts = pd.concat([flow_counts, out_flows_grouped], ignore_index=True)

# Map the nodes to indicies
flow_counts['Source'] = flow_counts['from_unit'].map(node_indices)
flow_counts['Target'] = flow_counts['to_unit'].map(node_indices)

# Remove cases where patients begin and end in the same unit
flow_counts = flow_counts[flow_counts['Source'] != flow_counts['Target']]

# Plot the diagram
node_colors = ["#0066CC", "#3388FF", "#66A3FF", "#99CCFF", "#66FF66", "#33CC33", "#009900", "#006400"]
fig = go.Figure(go.Sankey(node=dict(
    pad=15,
    thickness=25,
    line=dict(color='black', width=0.5),
    x=[0.05, 0.13, 0.26, 0.39, 0.8, 0.52, 0.65, 0.9],
    y=[0.3, 0.8, 0.66, 0.53, 0.13, 0.39, 0.26, 0.7],
    label=nodes, color=node_colors),
    link=dict(
        source=flow_counts['Source'],
        target=flow_counts['Target'],
        value=flow_counts['Flow'])
))
fig.update_layout(title_text="MIMIC-III Sankey Flow Diagram for<br>Emergency-admitted Patients into ICU Care Units", font_size=14, title={"x": 0.5, "xanchor": "center", "yanchor": "top"},)
fig.show()

"""### Visualization 2 - Chord Diagram of the Co-occurence of Drug Perscriptions in MIMIC-III"""

# Query the MIMIC-III prescriptions table for drug information
# Saves data in a Pandas dataframe
prescriptions_df = bq_client.query('''
SELECT subject_id, hadm_id, drug
FROM `physionet-data.mimiciii_clinical.prescriptions`
WHERE drug IS NOT NULL
ORDER BY subject_id, hadm_id
''').to_dataframe()

# Get drug pairs and setup the holoviews dataset
drug_pairs = []
for _, group in prescriptions_df.groupby(['subject_id', 'hadm_id']):
    drugs = group['drug'].dropna().unique()
    drug_pairs.extend(combinations(sorted(drugs), 2))

pairs_df = pd.DataFrame(drug_pairs, columns=['drug_1', 'drug_2'])
top_pairs = pairs_df.value_counts().reset_index(name='count').head(30)

all_drugs = pd.concat([top_pairs['drug_1'], top_pairs['drug_2']]).unique()
drug_indices = {drug: i for i, drug in enumerate(all_drugs)}

matrix_size = len(all_drugs)
adj_matrix = np.zeros((matrix_size, matrix_size), dtype=int)

for _, row in top_pairs.iterrows():
    i, j = drug_indices[row['drug_1']], drug_indices[row['drug_2']]
    adj_matrix[i, j] += row['count']
    adj_matrix[j, i] += row['count']

chord_data = []
for i in range(matrix_size):
    for j in range(i+1, matrix_size):
        if adj_matrix[i, j] > 0:
            chord_data.append({'source':all_drugs[i], 'target':all_drugs[j], 'value':adj_matrix[i, j]})

chord_df = pd.DataFrame(chord_data)
links_df = pd.DataFrame(columns = ['source', 'target', 'value'])

links_df['source'] = chord_df['source'].values.tolist()
links_df['target'] = chord_df['target'].values.tolist()
links_df['value'] = chord_df['value'].values.tolist()

unique_names = set(chord_df['source'].unique().tolist() + chord_df['target'].unique().tolist())

mapper = {key: i for i, key in enumerate(list(unique_names))}
links_df['source'] = links_df['source'].map(mapper)
links_df['target'] = links_df['target'].map(mapper)

drugs_df = pd.DataFrame(all_drugs)
drugs_df.columns = ['label']
drugs_df['index'] = drugs_df.index
nodes = hv.Dataset(drugs_df, 'index')

# Plot the diagram
chord = hv.Chord((links_df, nodes))

chord.opts(
    opts.Chord(
        cmap='BuGn',
        edge_cmap='BuGn',
        edge_color='target',
        node_color='index',
        width=800,
        height=800,
        labels='label',
        label_text_font_size='14pt',
        title="Chord Diagram of the Top 30 Co-occurrences of Drug Prescriptions in MIMIC-III"
    )
)
chord

"""### Visualization 3 - Stacked Area Plot of Patient Mortality Rate by Antibiotic Type Overtime from MIMIC-III"""

# Query the MIMIC-III noteevents table
# Saves data in a Pandas dataframe
antibiotic_mortality_df = bq_client.query('''
SELECT EXTRACT(YEAR FROM a.admittime) AS admission_year, si.antibiotic_name, a.hospital_expire_flag AS mortality
FROM `physionet-data.mimiciii_derived.suspicion_of_infection` si
JOIN `physionet-data.mimiciii_clinical.icustays` i ON si.icustay_id = i.icustay_id
JOIN `physionet-data.mimiciii_clinical.admissions` a ON i.hadm_id = a.hadm_id
WHERE si.antibiotic_name IS NOT NULL
''').to_dataframe()

antibiotic_groups = {'CefePIME': 'Beta-lactams', 'Cefepime': 'Beta-lactams', 'Rifampin': 'Other', 'Aztreonam': 'Beta-lactams', 'CefazoLIN': 'Beta-lactams', 'Cefazolin': 'Beta-lactams', 'Ampicillin': 'Beta-lactams', 'Vancomycin': 'Glycopeptides', 'CefTAZidime': 'Beta-lactams', 'CeftAZIDime': 'Beta-lactams', 'Clindamycin': 'Lincosamides', 'Azithromycin': 'Macrolides', 'Erythromycin': 'Macrolides', 'Levofloxacin': 'Fluoroquinolones', 'Azithromycin ': 'Macrolides', 'Ciprofloxacin': 'Fluoroquinolones', 'Metronidazole': 'Nitroimidazoles', 'Vancomycin HCl': 'Glycopeptides', 'Ciprofloxacin IV': 'Fluoroquinolones', 'Ampicillin Sodium': 'Beta-lactams', 'Ciprofloxacin HCl': 'Fluoroquinolones', 'NEO*IV*Gentamicin': 'Aminoglycosides', 'Gentamicin Sulfate': 'Aminoglycosides', 'Tobramycin Sulfate': 'Aminoglycosides', 'Doxycycline Hyclate': 'Tetracyclines', 'Ampicillin-Sulbactam': 'Beta-lactams', 'Cefpodoxime Proxetil': 'Beta-lactams', 'MetRONIDAZOLE (FLagyl)': 'Nitroimidazoles', 'Penicillin G Potassium': 'Beta-lactams', 'Sulfameth/Trimethoprim': 'Sulfonamides', 'Vancomycin Oral Liquid': 'Glycopeptides', 'Piperacillin-Tazobactam': 'Beta-lactams', 'Erythromycin Lactobionate': 'Macrolides', 'Sulfameth/Trimethoprim DS': 'Sulfonamides', 'Sulfameth/Trimethoprim SS': 'Sulfonamides', 'Piperacillin-Tazobactam Na': 'Beta-lactams', 'Nitrofurantoin Monohyd (MacroBID)': 'Nitrofurans', 'Oxacillin': 'Beta-lactams', 'Cephalexin': 'Beta-lactams', 'Amoxicillin': 'Beta-lactams', 'CeftazIDIME': 'Beta-lactams', 'Ceftazidime': 'Beta-lactams', 'Dicloxacillin': 'Beta-lactams', 'NEO*IV*Ampicillin Sodium': 'Beta-lactams', 'Amoxicillin-Clavulanic Acid': 'Beta-lactams', 'Sulfamethoxazole-Trimethoprim': 'Sulfonamides', 'Sulfameth/Trimethoprim Suspension': 'Sulfonamides', 'NEO*IV*AMPicillin Sodium': 'Beta-lactams', 'Unasyn': 'Beta-lactams', 'bactrim': 'Sulfonamides', 'Gentamicin': 'Aminoglycosides', 'Clarithromycin': 'Macrolides', 'Vancomycin Enema': 'Glycopeptides', 'NEO*IV*Vancomycin': 'Glycopeptides', 'Vancomycin Antibiotic Lock': 'Glycopeptides', 'Nitrofurantoin Macrocrystal': 'Nitrofurans', 'Nitrofurantoin (Macrodantin)': 'Nitrofurans', 'Clindamycin HCl': 'Lincosamides', 'Cefuroxime Sodium': 'Beta-lactams', 'NEO*IV*Clindamycin': 'Lincosamides', 'DiCLOXacillin': 'Beta-lactams', 'Augmentin Suspension': 'Beta-lactams', 'Amikacin': 'Aminoglycosides', 'NEO*IV*Oxacillin': 'Beta-lactams', 'Amoxicillin Oral Susp.': 'Beta-lactams', 'Vancomycin Intrathecal': 'Glycopeptides', 'Penicillin V Potassium': 'Beta-lactams', 'Clindamycin Suspension': 'Lincosamides', 'Amoxicillin-Clavulanate Susp.': 'Beta-lactams', 'Minocycline': 'Tetracyclines', 'NEO*IV*Cefotaxime': 'Beta-lactams', 'Tetracycline HCl': 'Tetracyclines', 'BACTRIM': 'Sulfonamides', 'Cephalexin ': 'Beta-lactams', 'Moxifloxacin': 'Fluoroquinolones', 'SulfADIAzine': 'Sulfonamides', 'Tobramycin Inhalation Soln': 'Aminoglycosides', 'Doxycycline Hyclate (Bulk)': 'Tetracyclines', 'moxifloxacin': 'Fluoroquinolones', 'NEO*IV*CeftazIDIME': 'Beta-lactams', '*NF* Moxifloxacin': 'Fluoroquinolones', 'Cipro': 'Fluoroquinolones', 'vancoMYCIN for nasal inhalation': 'Glycopeptides', 'vancoMYCIN for inhalation': 'Glycopeptides', 'NEO*IV*Cefazolin': 'Beta-lactams', 'Vancomycin Intraventricular': 'Glycopeptides', 'Sulfameth/Trimethoprim ': 'Sulfonamides', 'Nitrofurantoin': 'Nitrofurans', 'Sulfadiazine': 'Sulfonamides', 'LevoFLOXacin': 'Fluoroquinolones', 'Trimethoprim': 'Sulfonamides', 'Ciprofloxacin Hcl': 'Fluoroquinolones', 'Erythromycin Ethylsuccinate': 'Macrolides', 'Erythromycin Ethylsuccinate Suspension': 'Macrolides', 'Piperacillin': 'Beta-lactams', 'AMOXicillin Oral Susp.': 'Beta-lactams', 'NEO*IV*Piperacillin-Tazobactam': 'Beta-lactams', 'NEO*IV*CefazoLIN': 'Beta-lactams', 'NEO*IV*Ceftazidime': 'Beta-lactams', 'Cephalexin Suspension': 'Beta-lactams', 'NEO*IV*Erythromycin': 'Macrolides', 'Tobramycin': 'Aminoglycosides', 'NEO*IV*Penicillin G Potassium': 'Beta-lactams', '*NF* Nafcillin Sodium': 'Beta-lactams', 'AMOXicillin': 'Beta-lactams', '*NF* Timentin': 'Beta-lactams', 'NEO*PO*Cephalexin Suspension': 'Beta-lactams', 'Clindamycin Hcl': 'Lincosamides', 'Minocycline HCl': 'Tetracyclines', 'Gentamicin Intraventricular': 'Aminoglycosides', 'Cefuroxime': 'Beta-lactams', 'Penicillin G Benzathine': 'Beta-lactams', 'Cefotetan': 'Beta-lactams', 'MetRONIDAZOLE': 'Nitroimidazoles', 'Streptomycin Sulfate': 'Aminoglycosides', 'Chloramphenicol Na Succ': 'Chloramphenicol', 'Ampicillin Sodium/Sulbactam': 'Beta-lactams', 'Moxifloxacin HCl': 'Fluoroquinolones', 'Amikacin Inhalation': 'Aminoglycosides', 'moxifloxacin ': 'Fluoroquinolones', 'ERYTHROMYCIN': 'Macrolides', 'Clindamycin Solution': 'Lincosamides', 'Biaxin': 'Macrolides', 'Neo*IV*MetronidAZOLE': 'Nitroimidazoles', '*NF* Tobramycin Soln': 'Aminoglycosides', 'Cefuroxime Axetil': 'Beta-lactams', 'Doxycycline Hyclate (Periostat)': 'Tetracyclines', 'Clindamycin Phosphate': 'Lincosamides', 'Ciprofloxacin in D5W': 'Fluoroquinolones', 'tobramycin in 0.225 % NaCl': 'Aminoglycosides', 'Vancocin': 'Glycopeptides', 'Doxycycline Monohydrate': 'Tetracyclines', 'Sulfamethoxazole/Trimethoprim': 'Sulfonamides', '*NF* Cefotetan': 'Beta-lactams', 'Nitrofurantoin Suspension': 'Nitrofurans', 'MetronidAZOLE Oral Suspension': 'Nitroimidazoles', 'AMPicillin': 'Beta-lactams', 'Nafcillin Sodium': 'Beta-lactams', 'Bactrim': 'Sulfonamides', 'cefadroxil': 'Beta-lactams', 'Neo*PO*Azithromycin': 'Macrolides', '*NF* Cefoxitin Sodium': 'Beta-lactams', 'Piperacillin Sodium': 'Beta-lactams', 'Zithromax Z-Pak': 'Macrolides', 'Vancomycin ': 'Glycopeptides', 'Erythromycin Base': 'Macrolides', 'NEO*IM*Penicillin G Benzathine': 'Beta-lactams', 'Avelox': 'Fluoroquinolones', 'Amoxicillin Trihydrate': 'Beta-lactams', 'Amoxicillin-Clavulanate Susp': 'Beta-lactams', 'cephalexin': 'Beta-lactams', 'NEO*IV*Tobramycin Sulfate': 'Aminoglycosides', 'Cefotetan Disodium': 'Beta-lactams', '*NF* Cefotaxime': 'Beta-lactams', 'Trimethoprim Oral Soln': 'Sulfonamides'}
antibiotic_mortality_df['antibiotic_group'] = antibiotic_mortality_df['antibiotic_name'].map(antibiotic_groups)
antibiotic_mortality_df = antibiotic_mortality_df.groupby(['admission_year', 'antibiotic_group']).agg({'mortality': 'mean'}).reset_index()

# Create the stacked area plot
colors = ['#1b5e20', '#2e7d32', '#388e3c', '#43a047', '#4caf50', '#66bb6a', '#81c784', '#a5d6a7', '#a5c8e1', '#76a9d1', '#4e8ac1', '#2e6a9c', '#1565c0']

antibiotic_mortality_pivot = antibiotic_mortality_df.pivot_table(
    index='admission_year',
    columns='antibiotic_group',
    values='mortality'
).fillna(0)

plt.figure(figsize=(12, 8))
antibiotic_mortality_pivot.plot.area(stacked=True, figsize=(12, 8), color=colors)
plt.title("MIMIC-III Patient Mortality Rate by Antibiotic Type Overtime Stacked", fontsize=16)
plt.xlabel("Admission Year (Shifted)", fontsize=12)
plt.ylabel("Mortality Rate", fontsize=12)
plt.legend(title="Antibiotic Types", loc='upper left', bbox_to_anchor=(1, 1))

plt.tight_layout()
plt.show()

"""### Visualization 4 - Bar Chart of the Most Frequent Procedures in MIMIC-III"""

# Query the MIMIC-III cptevents table for procedure information
# Saves data in a Pandas dataframe
cpt_df = bq_client.query('''
SELECT sectionheader, COUNT(*) AS sectionheader_count
FROM `physionet-data.mimiciii_clinical.cptevents`
GROUP BY sectionheader
ORDER BY sectionheader_count DESC;
''').to_dataframe()

# Plot a bar chart to show the most frequent procedures
sns.set_theme(style='whitegrid')
plt.figure(figsize=(10, 6))
bars = sns.barplot(x=cpt_df['sectionheader'], y=cpt_df['sectionheader_count'], palette='mako', edgecolor='black')

for bar in bars.patches:
    plt.text(bar.get_x() + bar.get_width() / 2, bar.get_height() + 1, f'{int(bar.get_height())}', ha='center', va='bottom', fontsize=12)

plt.xlabel('Procedure')
plt.ylabel('Count')
plt.title('Most Frequent Procedure Types in MIMIC-III', fontsize=20)
plt.xticks(fontsize=12, rotation=45)
plt.yticks(fontsize=12)

sns.despine(left=True, bottom=True)
plt.show()

"""### Visualization 5 - Sunburst Chart for the Top 10 Diagnoses in MIMIC-III & Top 5 Procedures for Each"""

# SQL query to get the top 10 diagnoses and top 5 procedures from each ordered from largest to smallest by count
# Saves data in a Pandas dataframe
top_diagnosis_procedure_df = bq_client.query("""
WITH TopDiagnoses AS (
  SELECT icd9_code, COUNT(*) AS diagnosis_count
  FROM `physionet-data.mimiciii_clinical.diagnoses_icd`
  GROUP BY icd9_code
  ORDER BY diagnosis_count DESC
  LIMIT 10
),
TopProcedures AS (
  SELECT d.icd9_code AS diagnosis_code, p.icd9_code AS procedure_code, COUNT(*) AS procedure_count, RANK() OVER (PARTITION BY d.icd9_code ORDER BY COUNT(*) DESC) AS rank
  FROM `physionet-data.mimiciii_clinical.diagnoses_icd` d
  JOIN `physionet-data.mimiciii_clinical.procedures_icd` p ON d.subject_id = p.subject_id AND d.hadm_id = p.hadm_id
  WHERE d.icd9_code IN (SELECT icd9_code FROM TopDiagnoses)
  GROUP BY d.icd9_code, p.icd9_code
)
SELECT td.icd9_code AS diagnosis_code, dlong.long_title AS diagnosis_description, tp.procedure_code, plong.long_title AS procedure_description, tp.procedure_count
FROM TopProcedures tp
JOIN TopDiagnoses td ON tp.diagnosis_code = td.icd9_code
JOIN `physionet-data.mimiciii_clinical.d_icd_diagnoses` dlong ON td.icd9_code = dlong.icd9_code
JOIN `physionet-data.mimiciii_clinical.d_icd_procedures` plong ON tp.procedure_code = plong.icd9_code
WHERE tp.rank <= 5
ORDER BY td.diagnosis_count DESC, tp.procedure_count DESC;
""").to_dataframe()

# Plot the chart
fig = px.sunburst(
    top_diagnosis_procedure_df,
    path=["diagnosis_description", "procedure_description"],
    values="procedure_count",
    title="Sunburst Chart of Most Common Diagnoses<br> and Procedures from MIMIC-III",
    color_discrete_sequence=["#0066CC", "#3388FF", "#33CC33", "#66A3FF", "#99CCFF", "#66FF66", "#009900"])
fig.update_layout(title={"x": 0.5, "xanchor": "center", "yanchor": "top"}, margin=dict(t=80))
fig.show()
